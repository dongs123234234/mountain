rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 개발 환경용 규칙 (테스트 용도)
    // 운영 환경에서는 보안을 강화해야 합니다
    
    // 게시글 컬렉션
    match /posts/{postId} {
      // 모든 사용자가 읽기 가능
      allow read: if true;
      
      // 모든 사용자가 생성, 수정 가능 (개발 환경용)
      allow create, update: if true;
      
      // 삭제는 작성자만 가능 (예시)
      allow delete: if resource.data.author == request.auth.token.name;
    }
    
    // 댓글 컬렉션
    match /comments/{commentId} {
      // 모든 사용자가 읽기 가능
      allow read: if true;
      
      // 모든 사용자가 생성, 수정 가능 (개발 환경용)
      allow create, update: if true;
      
      // 삭제는 작성자만 가능 (예시)
      allow delete: if resource.data.author == request.auth.token.name;
    }
  }
}

// 운영 환경에서 사용할 보안 규칙 예시:
/*
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 인증된 사용자만 접근 가능
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid != null
        && request.resource.data.author == request.auth.token.name;
      allow update: if request.auth != null 
        && request.auth.uid != null
        && (resource.data.author == request.auth.token.name || 
            request.resource.data.keys().hasOnly(['likes']));
      allow delete: if request.auth != null 
        && resource.data.author == request.auth.token.name;
    }
    
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid != null
        && request.resource.data.author == request.auth.token.name;
      allow update: if request.auth != null 
        && resource.data.author == request.auth.token.name;
      allow delete: if request.auth != null 
        && resource.data.author == request.auth.token.name;
    }
  }
}
*/ 